var t="\n    button {\n        border: rgba(27, 31, 35, 0.15) solid 1px;\n        background-color: rgb(250, 251, 252);\n        cursor: pointer;\n        line-height: 20px;\n        font-size: 14px;\n        font-weight: 500;\n        font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji;\n        transition-delay: 0s;\n        transition-duration: 0.1s;\n        transition-property: color, background-color, border-color;\n        transition-timing-function: cubic-bezier(0.3, 0, 0.5, 1);\n    }\n    button[disabled] {\n        cursor: not-allowed;\n    }\n    \n    button:not([disabled]):hover {\n        background-color: rgb(243, 244, 246);\n    }\n    \n    button:not([disabled]):active {\n        background-color: rgb(235, 236, 240);\n        border-color: rgba(27, 31, 35, 0.1);\n    }\n";class e extends HTMLElement{constructor(){super();const e=this.attachShadow({mode:"open"}),n=document.createElement("style");n.textContent=`\n            ${t}\n            button {\n                border-radius: 6px;\n                padding: 5px 16px;\n            }\n        `;const i=document.createElement("button");i.textContent="🕔 Get My Rate Limit Status",i.addEventListener("click",(async()=>{i.setAttribute("disabled","disabled");const t="true"===localStorage.getItem("authenticated"),e=localStorage.getItem("token"),n=(()=>{if(t){const t=new Headers;return t.append("Authorization",`token ${e}`),async()=>await fetch("https://api.github.com/rate_limit",{headers:t})}return async()=>await fetch("https://api.github.com/rate_limit")})(),a=await n(),o=await a.json();if(200!==a.status)return alert(`Error: ${o.message}`),void i.removeAttribute("disabled");const r=o.resources.core;alert(`Authenticated: ${t}\nLimit: ${r.limit}\nUsed: ${r.used}\nRemaining: ${r.remaining}\nReset Time: ${new Date(1e3*r.reset)}`),i.removeAttribute("disabled")})),e.appendChild(n),e.appendChild(i)}}customElements.define("get-status",e);var n="\n    input {\n        padding: 5px 12px;\n        border: solid 1px rgb(225, 228, 232);\n        font-size: 14px;\n        line-height: 20px;\n        outline: none;\n    }\n    input:focus {\n        border-color: #0366d6;\n        box-shadow: 0 0 0 3px rgba(3, 102, 214, 0.3);\n    }\n";document.querySelector("search-view"),document.querySelector("token-auth");const i=document.querySelector("user-list");function a(t){return Object.entries(t).map((t=>`${t[0]}=${t[1]}`)).join("&")}async function o(t,e){let n=new Array;const i="true"===localStorage.getItem("authenticated")?(()=>{const n=new Headers,i=localStorage.getItem("token");return n.append("Authorization",`token ${i}`),async i=>{const o=a({per_page:100,page:i}),r=`https://api.github.com/users/${t}/${e}?${o}`;return await fetch(r,{headers:n})}})():async n=>{const i=a({per_page:100,page:n}),o=`https://api.github.com/users/${t}/${e}?${i}`;return await fetch(o)};for(let a=1;;a++){console.log(`Getting ${t}'s ${e} of page:`,a);const o=await i(a),r=await o.json();if(403===o.status)return alert(`Failed to get the ${e}: ${r.message.split(" (")[0]}`),n;if(200!==o.status)return alert(`Error: ${r.message}`),n;if(r.length>0&&(n=n.concat(r)),r.length<100)return n}}class r extends HTMLElement{constructor(){super(),this.getInputValue=()=>this.input.value;const e=this.attachShadow({mode:"open"}),a=document.createElement("style");a.textContent=`\n            ${t}\n            ${n}\n            :host {\n                margin-bottom: 20px;\n                display: flex;\n                flex-direction: row;\n                gap: 4px;\n            }\n            \n            input{\n                width: 240px;\n                border-radius: 6px;\n            }\n            \n            button {\n                border-radius: 6px;\n                padding: 5px 16px;\n            }\n        `,this.input=document.createElement("input"),this.input.type="text",this.input.placeholder="Search Username...",this.button=document.createElement("button"),this.button.textContent="Search",this.button.addEventListener("click",(async()=>{if(""===this.input.value)return void alert("Search-Username's value cannot be empty.");this.button.setAttribute("disabled","disabled"),console.log(`Starting ${this.input.value}...`);const t=await o(this.input.value,"followers"),e=await o(this.input.value,"following"),n=new Array;for(let i=0;i<t.length;i++)e.some((e=>e.id===t[i].id))&&n.push(t[i]);i.render(n),this.button.removeAttribute("disabled")})),e.appendChild(a),e.appendChild(this.input),e.appendChild(this.button)}}customElements.define("search-view",r);class s extends HTMLElement{constructor(){super(),this.getInputValue=()=>this.input.value,this.render=()=>{var t;"true"===(null!=(t=localStorage.getItem("authenticated"))?t:"false")?(this.button.textContent="✅",this.input.removeAttribute("disabled")):(this.button.textContent="❌",this.input.setAttribute("disabled","disabled"))};const e=this.attachShadow({mode:"open"}),i=document.createElement("style");i.textContent=`\n            ${t}\n            ${n}\n            :host {\n                display: flex;\n            }\n\n            input {\n                border-radius: 0 4px 4px 0;\n            }\n            \n            button {\n                padding: 4px 6px;\n                border-radius: 4px 0 0 4px;\n                border-right: none;\n            }\n        `,this.button=document.createElement("button"),this.button.textContent="Search",this.button.addEventListener("click",(async()=>{var t;"true"===(null!=(t=localStorage.getItem("authenticated"))?t:"false")?localStorage.setItem("authenticated","false"):localStorage.setItem("authenticated","true"),this.render()})),this.input=document.createElement("input"),this.input.type="text",this.input.placeholder="Personal Access Token",this.input.addEventListener("change",(async()=>{localStorage.setItem("token",this.input.value)})),e.appendChild(i),e.appendChild(this.button),e.appendChild(this.input)}connectedCallback(){var t;this.input.value=null!=(t=localStorage.getItem("token"))?t:"",this.render()}}customElements.define("token-auth",s);class l extends HTMLElement{constructor(){super(),this.render=t=>{this.list.innerHTML="",t.forEach((t=>{const e=document.createElement("a");e.className="user",e.setAttribute("href",t.html_url),e.setAttribute("target","_blank"),e.innerHTML=`\n                <img src="${t.avatar_url}">\n                <span>${t.login}</span>\n            `,this.list.appendChild(e)}))};const t=this.attachShadow({mode:"open"}),e=document.createElement("style");e.textContent="\n            .list {\n                display: flex;\n                flex-wrap: wrap;\n                justify-content: center;\n                gap: 20px;\n                max-width: 980px;\n                margin: 0 auto;\n            }\n            \n            .user{\n                width: 80px;\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                color: #24212e;\n                text-decoration: none;\n                word-break: break-all;\n            }\n\n            .user:hover {\n                color: #0366d6\n            }\n            \n            .user>img{\n                width: 100%;\n                border-radius: 50%;\n                margin-bottom: 8px;\n                border: solid 1px #e1e4e8\n            }\n        ",this.list=document.createElement("div"),this.list.className="list",t.appendChild(e),t.appendChild(this.list)}}customElements.define("user-list",l);
